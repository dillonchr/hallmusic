{"version":3,"sources":["Api.js","App.js","serviceWorker.js","index.js"],"names":["URLS","getFiles","url","a","fetch","res","ok","json","data","files","E","MP3","map","file","title","art","trackImage","loadAllOriginalSongs","style","page","css","textAlign","width","margin","audioPlayer","skipButton","background","border","color","cursor","fontSize","outline","padding","App","React","useState","songs","setSongs","song","setSong","chooseRandomSong","_songs","list","Array","isArray","length","reloadSongManifest","selectedSong","Math","random","filter","ignore","i","then","useEffect","Fragment","src","alt","key","autoPlay","controls","onEnded","type","onClick","Page","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAAaA,EAAO,CAChB,iHAGSC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACFC,MAAMF,GADJ,YACdG,EADc,QAEZC,GAFY,gCAGGD,EAAIE,OAHP,cAGVC,EAHU,yBAITA,EAAKC,MAAMC,EAAEC,IACfC,KAAI,SAACC,GACF,MAAO,CACHC,MAAOD,EAAKC,MACZZ,IAAKW,EAAKA,KAAKX,IACfa,IAAKF,EAAKG,WAAWd,SATjB,gCAab,IAba,2CAAH,sDAgBRe,EAAoB,uCAAG,sBAAAd,EAAA,sEACnBF,EAASD,EAAK,IADK,mFAAH,qDChB3BkB,EAAQ,CACVC,KAAMC,cAAI,CACNC,UAAW,SACXC,MAAO,OACPC,OAAQ,SAEZC,YAAaJ,cAAI,CACbE,MAAO,SAEXG,WAAYL,cAAI,CACZM,WAAY,UACZC,OAAQ,OACRC,MAAO,QACPC,OAAQ,UACRC,SAAU,OACVC,QAAS,OACTC,QAAS,UAIXC,EAAM,WAAO,IAAD,EACYC,IAAMC,SAAS,IAD3B,mBACPC,EADO,KACAC,EADA,OAEUH,IAAMC,SAAS,MAFzB,mBAEPG,EAFO,KAEDC,EAFC,KAGRC,EAAmB,SAACC,GACtB,IAAMC,EAAQC,MAAMC,QAAQH,IAAWA,GAAWL,EAClD,IAAKM,IAASA,EAAKG,OACf,OAAOC,IAEX,IAAMC,KAAkBC,KAAKC,SAAWP,EAAKG,QAC7CN,EAAQG,EAAKK,IACbV,EAASK,EAAKQ,QAAO,SAACC,EAAQC,GAAT,OAAeA,IAAML,OAExCD,EAAqB,WACvB7B,IACKoC,MAAK,SAAC5C,GACH+B,EAAiB/B,OAQ7B,OAJAyB,IAAMoB,WAAU,WACZR,MACD,IAEER,EAKD,kBAAC,IAAMiB,SAAP,KACI,4BAAKjB,EAAKxB,OACV,yBAAK0C,IAAKlB,EAAKvB,IAAK0C,IAAKnB,EAAKxB,QAC9B,6BACA,yCACI4C,IAAKpB,EAAKpC,IACVyD,UAAQ,EACRC,UAAQ,EACRC,QAASrB,GACLtB,EAAMM,aAEV,4BAAQgC,IAAKlB,EAAKpC,IAAK4D,KAAK,gBAEhC,4CAAY5C,EAAMO,WAAlB,CAA8BsC,QAASvB,IAAvC,cAjBG,2CA+BAwB,EARK,WAChB,OACI,wBAAS9C,EAAMC,KACX,kBAAC,EAAD,QC9DQ8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.6f1e8dcc.chunk.js","sourcesContent":["export const URLS = [\n    'https://apps.jw.org/GETPUBMEDIALINKS?output=json&pub=osg&fileformat=MP3&alllangs=0&langwritten=E&txtCMSLang=E',\n]\n\nexport const getFiles = async (url) => {\n    const res = await fetch(url)\n    if (res.ok) {\n        const data = await res.json()\n        return data.files.E.MP3\n            .map((file) => {\n                return {\n                    title: file.title,\n                    url: file.file.url,\n                    art: file.trackImage.url,\n                }\n            })\n    }\n    return []\n}\n\nexport const loadAllOriginalSongs = async () => {\n    return await getFiles(URLS[0])\n}\n","import React from 'react'\nimport { css } from 'glamor'\nimport { loadAllOriginalSongs } from './Api'\n\nconst style = {\n    page: css({\n        textAlign: 'center',\n        width: '90vw',\n        margin: 'auto',\n    }),\n    audioPlayer: css({\n        width: '100%',\n    }),\n    skipButton: css({\n        background: '#711D8C',\n        border: 'none',\n        color: 'white',\n        cursor: 'pointer',\n        fontSize: '2rem',\n        outline: 'none',\n        padding: '2rem',\n    }),\n}\n\nconst App = () => {\n    const [songs, setSongs] = React.useState([])\n    const [song, setSong] = React.useState(null)\n    const chooseRandomSong = (_songs) => {\n        const list = (Array.isArray(_songs) && _songs) || songs\n        if (!list || !list.length) {\n            return reloadSongManifest()\n        }\n        const selectedSong = ~~(Math.random() * list.length)\n        setSong(list[selectedSong])\n        setSongs(list.filter((ignore, i) => i !== selectedSong))\n    }\n    const reloadSongManifest = () => {\n        loadAllOriginalSongs()\n            .then((files) => {\n                chooseRandomSong(files)\n            })\n    }\n\n    React.useEffect(() => {\n        reloadSongManifest()\n    }, [])\n\n    if (!song) {\n        return <h1>Loading...</h1>\n    }\n\n    return (\n        <React.Fragment>\n            <h1>{song.title}</h1>\n            <img src={song.art} alt={song.title} />\n            <br />\n            <audio\n                key={song.url}\n                autoPlay\n                controls\n                onEnded={chooseRandomSong}\n                {...style.audioPlayer}\n            >\n                <source src={song.url} type=\"audio/mpeg\" />\n            </audio>\n            <button {...style.skipButton} onClick={chooseRandomSong}>Next Song</button>\n        </React.Fragment>\n    )\n}\n\n\nexport const Page = () => {\n    return (\n        <div {...style.page}>\n            <App />\n        </div>\n    )\n}\n\nexport default Page\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}